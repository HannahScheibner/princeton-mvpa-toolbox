= Instructions for committing changes to the SVN development version =

If you're on the list of project committers, then you can edit, add or delete code, and commit your changes to the main SVN development version. You can also edit the wiki pages to update them with relevant tweaks from the code.

You can see the list of committers in the right-hand sidebar of the main page:

http://code.google.com/p/princeton-mvpa-toolbox/

=== New Functionality and Utility Scripts ===

Adding new functionality is fairly straightforward.  First, make sure you're inserting it into an appropriate location in the overall code structure.  It would generally be more appropriate to include these additions in the 'contrib' folder unless you're performing core development.  If there are multiple related files involved, create a sub-folder under 'contrib'.

If you're adding any new functionality, please please include a series of [UnitTests unit tests].  Other scientists are going to be trusting and depending on your code, and writing unit tests is one of the very best ways to be sure things are working correctly.  Try and confirm all the major behaviors of the function (and any discernible edge cases), think about ways that the options might interact weirdly etc. This also makes it much easier for others to modify/extend your functions later and know that things are still working correctly.

Do also make sure to include a full description at the top of the file to describe what it's for, how it should work, example usage, a little about the variables it takes in and returns, citations to relevant papers, and anything else that would help future users. See e.g. the comments at the top for:

http://code.google.com/p/princeton-mvpa-toolbox/source/browse/trunk/core/learn/train_bp.m

http://code.google.com/p/princeton-mvpa-toolbox/source/browse/trunk/contrib/learn/optimal_penalty_search.m

=== Modification of Existing Scripts ===

Code updates and modifications should be handled with a larger degree of caution.  If the function already has unit tests the same results should be attained before an after the modification (assuming it's not a bug fix or correcting a 'known to fail' issue).  Modifications should also be documented by name and date at the top of the code beneath the function description.  If the modification is a feature improvement or expansion, these extra returns should be enabled via optional arguments so the default interface for the function does not change.

Major bug fixes (ie. core fixes) should be announced to the message board directly and contributed into the code base after testing.  It would be wise to request a code review for these bug fixes as well as all modifications using the google code - code review tools.

== Code Review ==

To request code review before it's committed to the main code block, you MUST create a storage folder for that code in the `/branches/` area of the SVN.  In the code review you should include the final destination of that file and anything that's relevant to the review should be noted in the request area (basically, fill out the template).

There are a large number of code reviewing tips located at the [http://code.google.com/p/support/wiki/CodeReviews central google code wiki].  These provide information on the best way to review code, how to watch a revision for code reviews and a variety of other useful tips like entering code review requests during your SVN commit to the /branches/ directory area.

== Other things ==

 * Every so often, we'll take the latest development version, and sanction it as an official release (usually after we've added major new functionality, or if it feels as though enough small changes have accumulated)

 * Feel free to improve any of the wiki documentation, especially if you add new stuff.  Also make sure to put the unit tests in place.