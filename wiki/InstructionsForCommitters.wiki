= Instructions for committing changes to the SVN development version =

If you're on the list of project committers, then you can edit, add or delete code, and commit your changes to the main SVN development version. You can also edit the wiki pages to update them with relevant tweaks from the code.

You can see the list of committers in the right-hand sidebar of the main page:

http://code.google.com/p/princeton-mvpa-toolbox/

== Types of Commits ==

There are two different main types of commits that we can expect at any given time, as we don't currently branch the code.  These being updates for existing code and new code.

=== New Functionality and Utility Scripts ===

If your adding new functionality to the system it's a fairly smooth slope.  First make sure your inserting it into an appropriate location in the overall code structure.  It would generally be more appropriate to include these additions in the 'contrib' folder unless your performing core development.  However if you are generating a new sub toolbox (ie. afni_matlab, boosting and the like) are large enough in their own right and anything of similar scale should be contributed as it's own sub folder of functions.

If your adding any new functionality it would be of great value to include with your work a series of proofing unit tests.  While it's not expected that these be perfect (as that is impossible) it would be excellent to confirm all the major behaviors of the function (and any discernible edge cases) to make sure the function is performing as desired. This will also allow us to modify and update these functions without breaking the known working functionality.

It would also be advisable to include a clear description at the top of the file describing exactly what your intended behavior for the functionality is.  This will help with referencing and improve the overall documentation of the code.

=== Modification of Existing Scripts ===

Code updates and modifications should be handled with a larger degree of caution.  If the function already has unit tests the same results should be attained before an after the modification (assuming it's not a bug fix or correcting a 'known to fail' issue).  Modifications should also be documented by name and date at the top of the code beneath the function description.  If the modification is a feature improvement or expansion, these extra returns should be enabled via optional arguments so the default interface for the function does not change.

Major bug fixes (ie. core fixes) should be announced to the message board directly and contributed into the code base after testing.  It would be wise to request a code review for these bug fixes as well as all modifications using the google code - code review tools.

== Code Review ==

To request code review before it's committed to the main code block, you MUST create a storage folder for that code in the `/branches/` area of the SVN.  In the code review you should include the final destination of that file and anything that's relevant to the review should be noted in the request area (basically, fill out the template).

There are a large number of code reviewing tips located at the [http://code.google.com/p/support/wiki/CodeReviews central google code wiki].  These provide information on the best way to review code, how to watch a revision for code reviews and a variety of other useful tips like entering code review requests during your SVN commit to the /branches/ directory area.

== Other things ==

 * Every so often, we'll take the latest development version, and sanction it as an official release (usually after we've added major new functionality, or if it feels as though enough small changes have accumulated)

 * Feel free to improve any of the wiki documentation, especially if you add new stuff.  Also make sure to put the unit tests in place.